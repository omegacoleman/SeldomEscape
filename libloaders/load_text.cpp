
#include "global.hpp"
#include <iostream>
#include "load_text.hpp"
#include "load_image.hpp"
#include <GL/gl.h>
#include <GL/glu.h>
#include "base_gl.hpp"

std::string chars = " !\"#$%&'()*+,-./"
"0123456789:;<=>?"
"@ABCDEFGHIJKLMNO"
"PQRSTUVWXYZ[\\]^_"
"`abcdefghijklmno"
"pqrstuvwxyz{|}~";

char c_table[255];

GLuint charmap_texture;

double charmap_rects[] = {
	0.00855615, 0.991071, 0.0417112, 0.835938,
	0.0513369, 0.991071, 0.0631016, 0.835938,
	0.0727273, 0.991071, 0.0983957, 0.835938,
	0.108021, 0.991071, 0.165775, 0.835938,
	0.175401, 0.991071, 0.217112, 0.835938,
	0.226738, 0.991071, 0.303743, 0.835938,
	0.313369, 0.991071, 0.388235, 0.835938,
	0.397861, 0.991071, 0.407487, 0.835938,
	0.417112, 0.991071, 0.440642, 0.835938,
	0.450267, 0.991071, 0.474866, 0.835938,
	0.484492, 0.991071, 0.521925, 0.835938,
	0.531551, 0.991071, 0.579679, 0.835938,
	0.589305, 0.991071, 0.604278, 0.835938,
	0.613904, 0.991071, 0.642781, 0.835938,
	0.652406, 0.991071, 0.665241, 0.835938,
	0.674866, 0.991071, 0.717647, 0.835938,
	0.00855615, 0.825893, 0.0566845, 0.670759,
	0.0663102, 0.825893, 0.108021, 0.670759,
	0.117647, 0.825893, 0.162567, 0.670759,
	0.172193, 0.825893, 0.214973, 0.670759,
	0.224599, 0.825893, 0.278075, 0.670759,
	0.287701, 0.825893, 0.329412, 0.670759,
	0.339037, 0.825893, 0.386096, 0.670759,
	0.395722, 0.825893, 0.44385, 0.670759,
	0.453476, 0.825893, 0.499465, 0.670759,
	0.509091, 0.825893, 0.55615, 0.670759,
	0.565775, 0.825893, 0.57861, 0.670759,
	0.588235, 0.825893, 0.605348, 0.670759,
	0.614973, 0.825893, 0.658824, 0.670759,
	0.668449, 0.825893, 0.716578, 0.670759,
	0.726203, 0.825893, 0.770053, 0.670759,
	0.779679, 0.825893, 0.816043, 0.670759,
	0.00855615, 0.660714, 0.0909091, 0.50558,
	0.100535, 0.660714, 0.165775, 0.50558,
	0.175401, 0.660714, 0.220321, 0.50558,
	0.229947, 0.660714, 0.284492, 0.50558,
	0.294118, 0.660714, 0.351872, 0.50558,
	0.361497, 0.660714, 0.40107, 0.50558,
	0.410695, 0.660714, 0.448128, 0.50558,
	0.457754, 0.660714, 0.517647, 0.50558,
	0.527273, 0.660714, 0.581818, 0.50558,
	0.591444, 0.660714, 0.613904, 0.50558,
	0.623529, 0.660714, 0.651337, 0.50558,
	0.660963, 0.660714, 0.712299, 0.50558,
	0.721925, 0.660714, 0.760428, 0.50558,
	0.770053, 0.660714, 0.84385, 0.50558,
	0.853476, 0.660714, 0.912299, 0.50558,
	0.921925, 0.660714, 0.990374, 0.50558,
	0.00855615, 0.495536, 0.0534759, 0.340402,
	0.0631016, 0.495536, 0.13369, 0.340402,
	0.143316, 0.495536, 0.193583, 0.340402,
	0.203209, 0.495536, 0.247059, 0.340402,
	0.256684, 0.495536, 0.306952, 0.340402,
	0.316578, 0.495536, 0.371123, 0.340402,
	0.380749, 0.495536, 0.44385, 0.340402,
	0.453476, 0.495536, 0.548663, 0.340402,
	0.558289, 0.495536, 0.617112, 0.340402,
	0.626738, 0.495536, 0.683422, 0.340402,
	0.693048, 0.495536, 0.748663, 0.340402,
	0.758289, 0.495536, 0.77754, 0.340402,
	0.787166, 0.495536, 0.829947, 0.340402,
	0.839572, 0.495536, 0.858824, 0.340402,
	0.868449, 0.495536, 0.916578, 0.340402,
	0.926203, 0.495536, 0.970053, 0.340402,
	0.00855615, 0.330357, 0.028877, 0.175223,
	0.0385027, 0.330357, 0.0812834, 0.175223,
	0.0909091, 0.330357, 0.139037, 0.175223,
	0.148663, 0.330357, 0.187166, 0.175223,
	0.196791, 0.330357, 0.245989, 0.175223,
	0.255615, 0.330357, 0.300535, 0.175223,
	0.31016, 0.330357, 0.342246, 0.175223,
	0.351872, 0.330357, 0.40107, 0.175223,
	0.410695, 0.330357, 0.454545, 0.175223,
	0.464171, 0.330357, 0.475936, 0.175223,
	0.485561, 0.330357, 0.514439, 0.175223,
	0.524064, 0.330357, 0.567914, 0.175223,
	0.57754, 0.330357, 0.587166, 0.175223,
	0.596791, 0.330357, 0.671658, 0.175223,
	0.681283, 0.330357, 0.725134, 0.175223,
	0.734759, 0.330357, 0.786096, 0.175223,
	0.00855615, 0.165179, 0.0566845, 0.0100446,
	0.0663102, 0.165179, 0.115508, 0.0100446,
	0.125134, 0.165179, 0.152941, 0.0100446,
	0.162567, 0.165179, 0.197861, 0.0100446,
	0.207487, 0.165179, 0.238503, 0.0100446,
	0.248128, 0.165179, 0.291979, 0.0100446,
	0.301604, 0.165179, 0.350802, 0.0100446,
	0.360428, 0.165179, 0.433155, 0.0100446,
	0.442781, 0.165179, 0.48877, 0.0100446,
	0.498396, 0.165179, 0.548663, 0.0100446,
	0.558289, 0.165179, 0.60107, 0.0100446,
	0.610695, 0.165179, 0.634225, 0.0100446,
	0.64385, 0.165179, 0.653476, 0.0100446,
	0.663102, 0.165179, 0.686631, 0.0100446,
	0.696257, 0.165179, 0.746524, 0.0100446,
};

void init_text(std::string charmap_filename)
{
	std::string::iterator it = chars.begin();
	int i = 0;
	for(; it != chars.end(); it++)
	{
		c_table[*it] = i;
		i++;
	}
	charmap_texture = get_texture(charmap_filename);
}

void draw_char(char c, double x, double y, double size)
{
	int index = c_table[c];
	double size_x = - size * (charmap_rects[index * 4] - charmap_rects[index * 4 + 2]) / (charmap_rects[index * 4 + 1] - charmap_rects[index * 4 + 3]);
    start_gl_3d(false);
    glColor3d(1.0, 1.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, charmap_texture);
    glEnable(GL_TEXTURE_2D);
    glBegin(GL_QUADS);
        glTexCoord2d(charmap_rects[index * 4 + 0], charmap_rects[index * 4 + 1]);glVertex2d(x, y);
        glTexCoord2d(charmap_rects[index * 4 + 0], charmap_rects[index * 4 + 3]);glVertex2d(x, y - size);
        glTexCoord2d(charmap_rects[index * 4 + 2], charmap_rects[index * 4 + 3]);glVertex2d(x + size_x, y - size);
        glTexCoord2d(charmap_rects[index * 4 + 2], charmap_rects[index * 4 + 1]);glVertex2d(x + size_x, y);
    glEnd();
    glDisable(GL_TEXTURE_2D);
}

void draw_str(const char* s, unsigned int len, double x, double y, double size)
{
    start_gl_3d(false);
    glColor3d(1.0, 1.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, charmap_texture);
    glEnable(GL_TEXTURE_2D);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); 
    glBegin(GL_QUADS);
	unsigned int i;
	double x_offset = 0;
	double y_offset = 0;
	for (i = 0; i < len; i++)
	{
		if (s[i] == '\n')
		{
			x_offset = 0;
			y_offset -= size;
			continue;
		}
		int index = c_table[s[i]];
		double size_x = - size * (charmap_rects[index * 4] - charmap_rects[index * 4 + 2]) / (charmap_rects[index * 4 + 1] - charmap_rects[index * 4 + 3]);
        glTexCoord2d(charmap_rects[index * 4 + 0], charmap_rects[index * 4 + 1]);glVertex2d(x_offset + x, y_offset + y);
        glTexCoord2d(charmap_rects[index * 4 + 0], charmap_rects[index * 4 + 3]);glVertex2d(x_offset + x, y_offset + y - size);
        glTexCoord2d(charmap_rects[index * 4 + 2], charmap_rects[index * 4 + 3]);glVertex2d(x_offset + x + size_x, y_offset + y - size);
        glTexCoord2d(charmap_rects[index * 4 + 2], charmap_rects[index * 4 + 1]);glVertex2d(x_offset + x + size_x, y_offset + y);
		x_offset += size_x;
	}
    glEnd();
    glDisable(GL_TEXTURE_2D);
	glDisable(GL_BLEND);
}

void draw_string(std::string s, double x, double y, double size)
{
	draw_str(s.c_str(), s.length(), x, y, size);
}
